// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// cpp_bio08
NumericMatrix cpp_bio08(NumericMatrix tas, NumericMatrix pr);
RcppExport SEXP _squirrygis_cpp_bio08(SEXP tasSEXP, SEXP prSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type tas(tasSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type pr(prSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_bio08(tas, pr));
    return rcpp_result_gen;
END_RCPP
}
// cpp_bio09
NumericMatrix cpp_bio09(NumericMatrix tas, NumericMatrix pr);
RcppExport SEXP _squirrygis_cpp_bio09(SEXP tasSEXP, SEXP prSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type tas(tasSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type pr(prSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_bio09(tas, pr));
    return rcpp_result_gen;
END_RCPP
}
// cpp_bio10
NumericMatrix cpp_bio10(NumericMatrix tas);
RcppExport SEXP _squirrygis_cpp_bio10(SEXP tasSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type tas(tasSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_bio10(tas));
    return rcpp_result_gen;
END_RCPP
}
// cpp_bio11
NumericMatrix cpp_bio11(NumericMatrix tas);
RcppExport SEXP _squirrygis_cpp_bio11(SEXP tasSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type tas(tasSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_bio11(tas));
    return rcpp_result_gen;
END_RCPP
}
// cpp_bio16
NumericMatrix cpp_bio16(NumericMatrix pr);
RcppExport SEXP _squirrygis_cpp_bio16(SEXP prSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type pr(prSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_bio16(pr));
    return rcpp_result_gen;
END_RCPP
}
// cpp_bio17
NumericMatrix cpp_bio17(NumericMatrix pr);
RcppExport SEXP _squirrygis_cpp_bio17(SEXP prSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type pr(prSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_bio17(pr));
    return rcpp_result_gen;
END_RCPP
}
// cpp_bio18
NumericMatrix cpp_bio18(NumericMatrix tas, NumericMatrix pr);
RcppExport SEXP _squirrygis_cpp_bio18(SEXP tasSEXP, SEXP prSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type tas(tasSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type pr(prSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_bio18(tas, pr));
    return rcpp_result_gen;
END_RCPP
}
// cpp_bio19
NumericMatrix cpp_bio19(NumericMatrix tas, NumericMatrix pr);
RcppExport SEXP _squirrygis_cpp_bio19(SEXP tasSEXP, SEXP prSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type tas(tasSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type pr(prSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_bio19(tas, pr));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_squirrygis_cpp_bio08", (DL_FUNC) &_squirrygis_cpp_bio08, 2},
    {"_squirrygis_cpp_bio09", (DL_FUNC) &_squirrygis_cpp_bio09, 2},
    {"_squirrygis_cpp_bio10", (DL_FUNC) &_squirrygis_cpp_bio10, 1},
    {"_squirrygis_cpp_bio11", (DL_FUNC) &_squirrygis_cpp_bio11, 1},
    {"_squirrygis_cpp_bio16", (DL_FUNC) &_squirrygis_cpp_bio16, 1},
    {"_squirrygis_cpp_bio17", (DL_FUNC) &_squirrygis_cpp_bio17, 1},
    {"_squirrygis_cpp_bio18", (DL_FUNC) &_squirrygis_cpp_bio18, 2},
    {"_squirrygis_cpp_bio19", (DL_FUNC) &_squirrygis_cpp_bio19, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_squirrygis(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
